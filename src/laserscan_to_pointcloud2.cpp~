/*
 * laserscan_to_pointcloud2.cpp
 *
 *  Created on: 2017年6月8日
 *      Author: tbm
 */

#include "../include/laserscan_to_pointcloud2/laserscan_to_pointcloud2.h"
#include <iostream>
#include <string>
#include <boost/bind.hpp>
#include <boost/shared_ptr.hpp>
#include <functional>

#include <ros/ros.h>
#include <tf/transform_listener.h>

using namespace boost;

laser_geometry::LaserProjection projector_;
tf::TransformListener listener_;
sensor_msgs::PointCloud2Ptr cloud_ptr_10  = boost::make_shared<sensor_msgs::PointCloud2>();
//sensor_msgs::PointCloud2Ptr cloud_ptr_10;

void scanCallback (const sensor_msgs::LaserScan::ConstPtr& scan_in, const ros::Publisher& pub )
{
	//static int count = 0;
	sensor_msgs::PointCloud2 cloud;
	projector_.projectLaser(*scan_in, cloud);
	//count++;
	/*
	if(count == 10)
	{
		count = 0;
	}
	*/
	pub.publish(cloud);
}

void concatenateCloud(sensor_msgs::PointCloud2Ptr cloud_ptr )
{
	cloud_ptr_10->width += cloud_ptr->width;
	cloud_ptr_10->row_step += cloud_ptr->row_step;
	cloud_ptr_10->data.insert(cloud_ptr_10->data.end(), cloud_ptr->data.begin(), cloud_ptr->data.end());
}

void scanCallback2(const sensor_msgs::LaserScan::ConstPtr& scan_in, const ros::Publisher& pub)
{
	static int count = 0;
	if(!listener_.waitForTransform(scan_in->header.frame_id, "base_link_inertial", scan_in->header.stamp , ros::Duration(1.0)))
	{
		return ;
	}
	count++;

	sensor_msgs::PointCloud2Ptr cloud_ptr = boost::make_shared<sensor_msgs::PointCloud2>();
	projector_.transformLaserScanToPointCloud("base_link_inertial",*scan_in, *cloud_ptr,listener_);
	if(count % 10 == 1)
	{
		count = 1;
		//cloud_ptr_10.reset();
		//cloud_ptr_10 = boost::make_shared<sensor_msgs::PointCloud2>();
		cloud_ptr_10->height = 1;
		cloud_ptr_10->width = 0;
		cloud_ptr_10->point_step = 20;
		cloud_ptr_10->row_step = 0;
		cloud_ptr_10->fields = cloud_ptr->fields;
		cloud_ptr_10->is_bigendian = false;
		cloud_ptr_10->is_dense = false;
		cloud_ptr_10->data.clear();
	}
	concatenateCloud(cloud_ptr);
	if(count % 10 == 0 )
	{
		pub.publish(cloud_ptr_10);
	}
	//boost::shared_ptr<sensor_msgs::PointCloud2> cloud_ptr = boost::make_shared<sensor_msgs::PointCloud2>();
	//projector_.transformLaserScanToPointCloud("base_link_inertial",*scan_in, *cloud_ptr,listener_);
	//concatenateCloud(cloud_ptr);
	//sensor_msgs::PointCloud2 cloud;
	//projector_.transformLaserScanToPointCloud("base_link_inertial",*scan_in, cloud,listener_);
	//boost::shared_ptr<sensor_msgs::PointCloud2> cloud_ptr = cloud;
	//concatenateCloud(cloud_ptr);

	}

int main(int argc, char** argv)
{

	std::cout << "hello world !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << std::endl;
	//using namespace std::placeholders;

	ros::init(argc, argv, "tbm");
	//cloud_ptr_10->data.reserve(144000);
	ros::NodeHandle nh;
	ros::Publisher pub = nh.advertise<sensor_msgs::PointCloud2>("assembled_cloud_sub_topic", 500);
	ros::Subscriber sub = nh.subscribe<sensor_msgs::LaserScan>("laser/scan/1", 100, boost::bind(scanCallback, _1, pub));
	ros::spin();
	return 0;
}


